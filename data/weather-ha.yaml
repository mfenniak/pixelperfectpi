alias: "MQTT Publish: Send Suresnes weather to pixelperfectpi"
description: ""
trigger:
  - platform: state
    entity_id:
      - weather.suresnes
    attribute: temperature
condition: []
action:
  - service: weather.get_forecasts
    data:
      type: daily
    target:
      entity_id: weather.suresnes
    response_variable: daily
  - service: weather.get_forecasts
    data:
      type: hourly
    target:
      entity_id: weather.suresnes
    response_variable: hourly
  - service: mqtt.publish
    data:
      qos: "1"
      retain: true
      topic: homeassistant/output/weather/Suresnes
      payload: |-
        {
          "current": {
            "condition": "{{ states.weather.suresnes.state }}",
            "temperature": {{ state_attr('weather.suresnes', 'temperature') if state_attr('weather.suresnes', 'temperature') is not none else 'null' }},
            "humidity": {{ state_attr('weather.suresnes', 'humidity') if state_attr('weather.suresnes', 'humidity') is not none else 'null' }},
            "pressure": {{ state_attr('weather.suresnes', 'pressure') if state_attr('weather.suresnes', 'pressure') is not none else 'null' }},
            "wind_bearing": {{ state_attr('weather.suresnes', 'wind_bearing') if state_attr('weather.suresnes', 'wind_bearing') is not none else 'null' }},
            "wind_speed": {{ state_attr('weather.suresnes', 'wind_speed') if state_attr('weather.suresnes', 'wind_speed') is not none else 'null' }},
            "uv": {{ states.sensor.suresnes_uv.state }}
          },
          "forecasts": {
            "daily": {{ daily['weather.suresnes'].forecast|tojson }},
            "hourly": {{ hourly['weather.suresnes'].forecast|tojson }}
          }
        }
mode: single
